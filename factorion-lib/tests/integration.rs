use factorion_lib::rug::{Float, Integer};

use factorion_lib::{
    calculation_results::{Calculation, CalculationResult, Number},
    calculation_tasks::{CalculationBase, CalculationJob},
    recommended::FLOAT_PRECISION,
};
use factorion_math as math;

const MAX_LENGTH: usize = 10_000;

use factorion_lib::comment::*;

type Comment<S> = factorion_lib::comment::Comment<(), S>;

#[test]
fn test_comment_new() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 5! and 6!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment.calculation_list,
        vec![
            Calculation {
                value: 5.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(Integer::from(120)),
            },
            Calculation {
                value: 6.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(Integer::from(720)),
            },
        ],
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}

#[test]
fn test_comment_new_double_factorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with an n-factorial 6!!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: 6.into(),
            steps: vec![(2, 0)],
            result: CalculationResult::Exact(Integer::from(48)),
        }]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}

#[test]
fn test_comment_new_triple_factorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with an n-factorial 6!!!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: 6.into(),
            steps: vec![(3, 0)],
            result: CalculationResult::Exact(Integer::from(18)),
        }]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}

#[test]
fn test_comment_new_spoiler() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        ">!This is a spoiler comment 5!<",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}

#[test]
fn test_comment_new_spoiler_html_encoded() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "&gt;!This is a spoiler comment 5!&lt;",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}

#[test]
fn test_comment_new_subfactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a spoiler comment !5",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: 5.into(),
            steps: vec![(0, 0)],
            result: CalculationResult::Exact(Integer::from(44)),
        }]
    );
}
#[test]
fn test_comment_new_termial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a spoiler comment 5?",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: 5.into(),
            steps: vec![(-1, 0)],
            result: CalculationResult::Exact(Integer::from(15)),
        }]
    );
}
#[test]
fn test_comment_new_tripletermial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a spoiler comment 5???",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: 5.into(),
            steps: vec![(-3, 0)],
            result: CalculationResult::Exact(Integer::from(7)),
        }]
    );
}
#[test]
fn test_comment_new_negative() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a spoiler comment -5? -5! -!5 --(10)!",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    assert_eq!(
        comment.calculation_list,
        vec![
            Calculation {
                value: Number::Exact(5.into()),
                steps: vec![(-1, 1)],
                result: CalculationResult::Exact((-15).into())
            },
            Calculation {
                value: Number::Exact(5.into()),
                steps: vec![(0, 1)],
                result: CalculationResult::Exact((-44).into())
            },
            Calculation {
                value: Number::Exact(5.into()),
                steps: vec![(1, 1)],
                result: CalculationResult::Exact((-120).into())
            },
            Calculation {
                value: Number::Exact(10.into()),
                steps: vec![(1, 2)],
                result: CalculationResult::Exact(3628800.into())
            }
        ]
    );
}
#[test]
fn test_comment_new_of_negative() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a spoiler comment (-5)! (-5)!! (-5)!!!! (-5)!!!!!",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    assert_eq!(
        comment.calculation_list,
        vec![
            Calculation {
                value: (-5).into(),
                steps: vec![(1, 0)],
                result: CalculationResult::ComplexInfinity,
            },
            Calculation {
                value: (-5).into(),
                steps: vec![(2, 0)],
                result: CalculationResult::Float(
                    Float::with_val(FLOAT_PRECISION, 3).recip().into()
                ),
            },
            Calculation {
                value: (-5).into(),
                steps: vec![(4, 0)],
                result: CalculationResult::Exact((-1).into()),
            },
            Calculation {
                value: (-5).into(),
                steps: vec![(5, 0)],
                result: CalculationResult::ComplexInfinity,
            }
        ]
    );
}

#[test]
fn test_comment_new_exclamations_one() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with exclamation mark stuff!!!1!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}

#[test]
fn test_comment_new_exclamations_eleven() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with exclamation mark stuff!!!11!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}

#[test]
fn test_comment_new_decimals() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 0.5!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment
            .calculation_list
            .into_iter()
            .map(|calc| match calc {
                Calculation {
                    value: Number::Float(number),
                    steps: _,
                    result: CalculationResult::Float(gamma),
                } => (number.as_float().to_f64(), gamma.as_float().to_f64()),
                _ => unreachable!("No normal factorial included"),
            })
            .collect::<Vec<_>>(),
        vec![(0.5, 0.886226925452758)]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}
#[test]
fn test_comment_new_decimal_integer() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 0.0!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: Number::Exact(0.into()),
            steps: vec![(1, 0)],
            result: CalculationResult::Exact(1.into())
        }]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}
#[test]
fn test_comment_new_decimals_multifactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 0.5!!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment
            .calculation_list
            .into_iter()
            .map(|calc| match calc {
                Calculation {
                    value: Number::Float(number),
                    steps: _,
                    result: CalculationResult::Float(gamma),
                } => (number.as_float().to_f64(), gamma.as_float().to_f64()),
                _ => unreachable!("No normal factorial included"),
            })
            .collect::<Vec<_>>(),
        vec![(0.5, 0.9628277824464175)]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}
#[test]
fn test_comment_new_decimals_termial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 0.5?",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment
            .calculation_list
            .into_iter()
            .map(|calc| match calc {
                Calculation {
                    value: Number::Float(number),
                    steps: _,
                    result: CalculationResult::Float(gamma),
                } => (number.as_float().to_f64(), gamma.as_float().to_f64()),
                _ => unreachable!("No normal factorial included"),
            })
            .collect::<Vec<_>>(),
        vec![(0.5, 0.375)]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}
#[test]
fn test_comment_new_multitermial_decimals() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 1294.5??",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}
#[test]
fn test_comment_new_subfactorial_decimals() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number !1294.5",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}

#[test]
fn test_comment_new_decimals_incomplete() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number .5!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract();
    assert_eq!(
        comment.calculation_list,
        [CalculationJob {
            base: CalculationBase::Num(Number::Float(Float::with_val(FLOAT_PRECISION, 0.5).into())),
            level: 1,
            negative: 0,
        }]
    );
}
#[test]
fn test_comment_new_comma_decimals() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 0,5!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract();
    assert_eq!(
        comment.calculation_list,
        [CalculationJob {
            base: CalculationBase::Num(Number::Float(Float::with_val(FLOAT_PRECISION, 0.5).into())),
            level: 1,
            negative: 0,
        }]
    );
}

#[test]
fn test_comment_new_exponentials() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number 5.1e-2!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment
            .calculation_list
            .into_iter()
            .map(|calc| match calc {
                Calculation {
                    value: Number::Float(number),
                    steps: _,
                    result: CalculationResult::Float(gamma),
                } => (number.as_float().to_f64(), gamma.as_float().to_f64()),
                _ => unreachable!("No normal factorial included"),
            })
            .collect::<Vec<_>>(),
        vec![(0.051, 0.973020477127066)]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}
#[test]
fn test_comment_new_exponentials_positive() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with decimal number -0.1e+2! 1.12342e+2!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
            comment.calculation_list,
            [
                Calculation {
                    value: Number::Exact(10.into()),
                    steps: vec![(1, 1)],
                    result: CalculationResult::Exact((-3628800).into())
                },
                Calculation {
                    value: Number::Float(Float::with_val(FLOAT_PRECISION, Float::parse("112.342").unwrap()).into()),
                    steps: vec![(1, 0)],
                    result: CalculationResult::Float(Float::with_val(FLOAT_PRECISION, Float::parse("993525073229285436539807503113271988267318728609930136156505804196109258655775654879896155361191576205057992198378530500089998766548809286881281158234109518671597164775130317741632313.7252607309857759503328865475739439663463350416381893570704080831760770928994102217701454569735908025174055229200345933253782907").unwrap()).into())
                },
            ]
        );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}

#[test]
fn test_comment_new_constants() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with constants pi! And non-constant pie! pine! tribute!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    assert_eq!(
        comment
            .calculation_list
            .into_iter()
            .map(|calc| match calc {
                Calculation {
                    value: Number::Float(number),
                    steps: _,
                    result: CalculationResult::Float(gamma),
                } => (number.as_float().to_f64(), gamma.as_float().to_f64()),
                _ => unreachable!("No normal factorial included"),
            })
            .collect::<Vec<_>>(),
        vec![(std::f64::consts::PI, 7.188082728976033)]
    );
    assert_eq!(comment.status, Status::FACTORIALS_FOUND);
}

#[test]
fn test_comment_new_fraction() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial of fractions !1/2! (1/2)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Subfactorial of 1 is 0 \n\nThe factorial of 2 is 2 \n\nThe factorial of 0.5 is approximately 0.886226925452758 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
#[ignore = "currently obsolete"]
fn test_comment_new_big_number_and_normal_number() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This is a test comment with a factorial of 555555555555555555555555555555555555555555! and 6!",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();
    assert_eq!(
        comment.calculation_list,
        vec![Calculation {
            value: 6.into(),
            steps: vec![(1, 0)],
            result: CalculationResult::Exact(Integer::from(720))
        }]
    );
    assert_eq!(
        comment.status,
        Status::FACTORIALS_FOUND | Status::NUMBER_TOO_BIG_TO_CALCULATE
    );
}

#[test]
#[ignore = "currently obsolete"]
fn test_comment_new_very_big_number() {
    let _ = factorion_lib::init_default();
    let very_big_number = "9".repeat(10_000) + "!";
    let comment = Comment::new(&very_big_number, (), Commands::NONE, MAX_LENGTH)
        .extract()
        .calc();
    assert_eq!(comment.calculation_list, vec![]);
    assert_eq!(
        comment.status,
        Status::FACTORIALS_FOUND | Status::NUMBER_TOO_BIG_TO_CALCULATE
    );
}

#[test]
fn test_add_status() {
    let _ = factorion_lib::init_default();
    let mut comment = Comment::new(
        "This is a test comment with a factorial of 5! and 6!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    comment.add_status(Status::NOT_REPLIED);
    assert_eq!(
        comment.status,
        Status::FACTORIALS_FOUND | Status::NOT_REPLIED
    );
}

#[test]
fn test_can_reply_to_factorial_that_is_subfactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment has a subfactorial which is also a factorial !23!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(
        comment.get_reply(),
        "That is so large, that I can't calculate it, so I'll have to approximate.\n\nThe factorial of subfactorial of 23 is approximately 5.973414105357603 × 10^204891707276976900386618 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_shorten() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment would like the short version of this factorial 200! \\[short\\]",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 200 is roughly 7.886578673647905035523632139322 × 10^374 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_termial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment would like the short version of this factorial 2? \\[termial\\]",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The termial of 2 is 3 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_no_note() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment would like the short version of this factorial 10939742352358! \\[no_note\\]",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 10939742352358 is approximately 4.451909479489793 × 10^137892308399887 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_steps() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This comment would like to know all the steps to this factorial chain ((3!)!)! \\[all\\] \\[short\\]",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 3 is 6 \n\nThe factorial of the factorial of 3 is 720 \n\nThe factorial of the factorial of the factorial of 3 is roughly 2.601218943565795100204903227081 × 10^1746 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_long() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment would like the short version of this factorial 200! \\[long\\]",
        (),
        Commands::SHORTEN,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 200 is 788657867364790503552363213932185062295135977687173263294742533244359449963403342920304284011984623904177212138919638830257642790242637105061926624952829931113462857270763317237396988943922445621451664240254033291864131227428294853277524242407573903240321257405579568660226031904170324062351700858796178922222789623703897374720000000000000000000000000000000000000000000000000 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_no_termial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment would like the short version of this factorial 2? \\[no termial\\]",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    assert_eq!(comment.status, Status::NO_FACTORIAL);
}

#[test]
fn test_command_note() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This comment would like the short version of this factorial 10939742352358! \\[note\\]",
        (),
        Commands::NO_NOTE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't calculate it, so I'll have to approximate.\n\nThe factorial of 10939742352358 is approximately 4.451909479489793 × 10^137892308399887 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_no_steps() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This comment would like to know all the steps to this factorial chain ((3!)!)! \\[no steps\\] \\[short\\]",
            (),
            Commands::STEPS,
            MAX_LENGTH
        ).extract()
        .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of the factorial of the factorial of 3 is roughly 2.601218943565795100204903227081 × 10^1746 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_command_steps_tower() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This comment would like to know all the steps to this factorial chain (((9!)!)!)! \\[all\\] \\[short\\]",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Some of these are so large, that I can't even give the number of digits of them, so I have to make a power of ten tower.\n\nThe factorial of 9 is 362880 \n\nThe factorial of the factorial of 9 is roughly 1.609714400410012621103443610733 × 10^1859933 \n\nThe factorial of the factorial of the factorial of 9 has approximately 2.993960567614282167996111938338 × 10^1859939 digits \n\nThe factorial of the factorial of the factorial of the factorial of 9 has on the order of 10^(2.993960567614282167996111938338 × 10^1859939) digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_reply_text_shorten() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "3500! 3501! 3502! 3503! 3504! 3505! 3506! 3507! 3508! 3509! 3510! 3511! 3512! 3513! 3514! 3515! 3516! 3517! 3518! 3519! 3520! 3521! 3522! 3523! 3524! 3525! 3526! 3527! 3528! 3529! 3530! 3531! 3532! 3533! 3534! 3535! 3536! 3537! 3538! 3539! 3540! 3541! 3542! 3543! 3544! 3545! 3546! 3547! 3548! 3549! 3550! 3551! 3552! 3553! 3554! 3555! 3556! 3557! 3558! 3559! 3560! 3561! 3562! 3563! 3564! 3565! 3566! 3567! 3568! 3569! 3570! 3571! 3572! 3573! 3574! 3575! 3576! 3577! 3578! 3579! 3580! 3581! 3582! 3583! 3584! 3585! 3586! 3587! 3588! 3589! 3590! 3591! 3592! 3593! 3594! 3595! 3596! 3597! 3598! 3599! 3600! 3600! 3601! 3602! 3603! 3604! 3605! 3606! 3607! 3608! 3609! 3610! 3611! 3612! 3613! 3614! 3615! 3616! 3617! 3618! 3619! 3620! 3621! 3622! 3623! 3624! 3625! 3626! 3627! 3628! 3629! 3630! 3631! 3632! 3633! 3634! 3636! 3636! 3637! 3638! 3639! 3640! 3641! 3642! 3643! 3644! 3645! 3646! 3647! 3648! 3649! 3650! 3651! 3652! 3653! 3654! 3655! 3656! 3657! 3658! 3659! 3660! 3661! 3662! 3663! 3664! 3665! 3666! 3667! 3668! 3669! 3670! 3671! 3672! 3673! 3674! 3675! 3676! 3677! 3678! 3679! 3680! 3681! 3682! 3683! 3684! 3685! 3686! 3687! 3688! 3689! 3690! 3691! 3692! 3693! 3694! 3695! 3696! 3697! 3698! 3699! 3600!",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "If I posted all numbers, the comment would get too long. So I had to remove some of them. \n\nThe factorial of 3500 is roughly 2.391128199477649525095387493694 × 10^10886 \n\nThe factorial of 3501 is roughly 8.371339826371250987358951615421 × 10^10889 \n\nThe factorial of 3502 is roughly 2.931643207195212095773104855721 × 10^10893 \n\nThe factorial of 3503 is roughly 1.026954615480482797149318630959 × 10^10897 \n\nThe factorial of 3504 is roughly 3.59844897264361172121121248288 × 10^10900 \n\nThe factorial of 3505 is roughly 1.261256364911585908284529975249 × 10^10904 \n\nThe factorial of 3506 is roughly 4.421964815380020194445562093225 × 10^10907 \n\nThe factorial of 3507 is roughly 1.550783060753773082192058626094 × 10^10911 \n\nThe factorial of 3508 is roughly 5.440146977124235972329741660337 × 10^10914 \n\nThe factorial of 3509 is roughly 1.908947574272894402690506348612 × 10^10918 \n\nThe factorial of 3510 is roughly 6.700405985697859353443677283629 × 10^10921 \n\nThe factorial of 3511 is roughly 2.352512541578518418994075094282 × 10^10925 \n\nThe factorial of 3512 is roughly 8.262024046023756687507191731119 × 10^10928 \n\nThe factorial of 3513 is roughly 2.902449047368145724321276455142 × 10^10932 \n\nThe factorial of 3514 is roughly 1.019920595245166407526496546337 × 10^10936 \n\nThe factorial of 3515 is roughly 3.585020892286759922455635360374 × 10^10939 \n\nThe factorial of 3516 is roughly 1.260493345728024788735401392708 × 10^10943 \n\nThe factorial of 3517 is roughly 4.433155096925463181982406698153 × 10^10946 \n\nThe factorial of 3518 is roughly 1.55958396309837794742141067641 × 10^10950 \n\nThe factorial of 3519 is roughly 5.488175966143191996975944170287 × 10^10953 \n\nThe factorial of 3520 is roughly 1.931837940082403582935532347941 × 10^10957 \n\nThe factorial of 3521 is roughly 6.802001387030143015516009397101 × 10^10960 \n\nThe factorial of 3522 is roughly 2.395664888512016370064738509659 × 10^10964 \n\nThe factorial of 3523 is roughly 8.439927402227833671738073769528 × 10^10967 \n\nThe factorial of 3524 is roughly 2.974230416545088585920497196382 × 10^10971 \n\nThe factorial of 3525 is roughly 1.048416221832143726536975261725 × 10^10975 \n\nThe factorial of 3526 is roughly 3.696715598180138779769374772841 × 10^10978 \n\nThe factorial of 3527 is roughly 1.303831591478134947624658482381 × 10^10982 \n\nThe factorial of 3528 is roughly 4.59991785473486009521979512584 × 10^10985 \n\nThe factorial of 3529 is roughly 1.623311010935932127603065699909 × 10^10989 \n\nThe factorial of 3530 is roughly 5.730287868603840410438821920679 × 10^10992 \n\nThe factorial of 3531 is roughly 2.023364646404016048925948020192 × 10^10996 \n\nThe factorial of 3532 is roughly 7.146523931098984684806448407317 × 10^10999 \n\nThe factorial of 3533 is roughly 2.524866904857271289142118222305 × 10^11003 \n\nThe factorial of 3534 is roughly 8.922879641765596735828245797626 × 10^11006 \n\nThe factorial of 3535 is roughly 3.154237953364138446115284889461 × 10^11010 \n\nThe factorial of 3536 is roughly 1.115338540309559354546364736913 × 10^11014 \n\nThe factorial of 3537 is roughly 3.944952417074911437030492074462 × 10^11017 \n\nThe factorial of 3538 is roughly 1.395724165161103666421388095945 × 10^11021 \n\nThe factorial of 3539 is roughly 4.939467820505145875465292471549 × 10^11024 \n\nThe factorial of 3540 is roughly 1.748571608458821639914713534928 × 10^11028 \n\nThe factorial of 3541 is roughly 6.191692065552687426938000627181 × 10^11031 \n\nThe factorial of 3542 is roughly 2.193097329618761886621439822147 × 10^11035 \n\nThe factorial of 3543 is roughly 7.770143838839273364299761289869 × 10^11038 \n\nThe factorial of 3544 is roughly 2.753738976484638480307835401129 × 10^11042 \n\nThe factorial of 3545 is roughly 9.762004671638043412691276497004 × 10^11045 \n\nThe factorial of 3546 is roughly 3.461606856562850194140326645838 × 10^11049 \n\nThe factorial of 3547 is roughly 1.227831952022842963861573861279 × 10^11053 \n\nThe factorial of 3548 is roughly 4.356347765777046835780864059816 × 10^11056 \n\nThe factorial of 3549 is roughly 1.546067822074273922018628654829 × 10^11060 \n\nThe factorial of 3550 is roughly 5.488540768363672423166131724642 × 10^11063 \n\nThe factorial of 3551 is roughly 1.948980826845940077466293375421 × 10^11067 \n\nThe factorial of 3552 is roughly 6.922779896956779155160274069494 × 10^11070 \n\nThe factorial of 3553 is roughly 2.459663697388743633828445376891 × 10^11074 \n\nThe factorial of 3554 is roughly 8.741644780519594874626294869471 × 10^11077 \n\nThe factorial of 3555 is roughly 3.107654719474715977929647826097 × 10^11081 \n\nThe factorial of 3556 is roughly 1.10508201824520900175178276696 × 10^11085 \n\nThe factorial of 3557 is roughly 3.930776738898208419231091302077 × 10^11088 \n\nThe factorial of 3558 is roughly 1.398570363699982555562422285279 × 10^11092 \n\nThe factorial of 3559 is roughly 4.977511924408237915246660913308 × 10^11095 \n\nThe factorial of 3560 is roughly 1.771994245089332697827811285138 × 10^11099 \n\nThe factorial of 3561 is roughly 6.310071506763113736964835986375 × 10^11102 \n\nThe factorial of 3562 is roughly 2.247647470709021113106874578347 × 10^11106 \n\nThe factorial of 3563 is roughly 8.00836793813624222599979412265 × 10^11109 \n\nThe factorial of 3564 is roughly 2.854182333151756729346326625312 × 10^11113 \n\nThe factorial of 3565 is roughly 1.017516001768601274011965441924 × 10^11117 \n\nThe factorial of 3566 is roughly 3.6284620623068321431266687659 × 10^11120 \n\nThe factorial of 3567 is roughly 1.294272417624847025453282748797 × 10^11124 \n\nThe factorial of 3568 is roughly 4.617963986085454186817312847707 × 10^11127 \n\nThe factorial of 3569 is roughly 1.648151346633898599275098955346 × 10^11131 \n\nThe factorial of 3570 is roughly 5.883900307483017999412103270587 × 10^11134 \n\nThe factorial of 3571 is roughly 2.101140799802185727590062077927 × 10^11138 \n\nThe factorial of 3572 is roughly 7.505274936893407418951701742354 × 10^11141 \n\nThe factorial of 3573 is roughly 2.681634734952014470791443032543 × 10^11145 \n\nThe factorial of 3574 is roughly 9.584162542718499718608617398309 × 10^11148 \n\nThe factorial of 3575 is roughly 3.426338109021863649402580719895 × 10^11152 \n\nThe factorial of 3576 is roughly 1.225258507786218441026362865435 × 10^11156 \n\nThe factorial of 3577 is roughly 4.382749682351303363551299969659 × 10^11159 \n\nThe factorial of 3578 is roughly 1.568147836345296343478655129144 × 10^11163 \n\nThe factorial of 3579 is roughly 5.612401106279815613310106707207 × 10^11166 \n\nThe factorial of 3580 is roughly 2.00923959604817398956501820118 × 10^11170 \n\nThe factorial of 3581 is roughly 7.195086993448511056632330178426 × 10^11173 \n\nThe factorial of 3582 is roughly 2.577280161053256660485700669912 × 10^11177 \n\nThe factorial of 3583 is roughly 9.234394817053818614520265500295 × 10^11180 \n\nThe factorial of 3584 is roughly 3.309607102432088591444063155306 × 10^11184 \n\nThe factorial of 3585 is roughly 1.186494146221903760032696641177 × 10^11188 \n\nThe factorial of 3586 is roughly 4.254768008351746883477250155261 × 10^11191 \n\nThe factorial of 3587 is roughly 1.526185284595771607103289630692 × 10^11195 \n\nThe factorial of 3588 is roughly 5.475952801129628526286603194924 × 10^11198 \n\nThe factorial of 3589 is roughly 1.965319460325423678084261886658 × 10^11202 \n\nThe factorial of 3590 is roughly 7.055496862568271004322500173102 × 10^11205 \n\nThe factorial of 3591 is roughly 2.533628923348266117652209812161 × 10^11209 \n\nThe factorial of 3592 is roughly 9.100795092666971894606737645283 × 10^11212 \n\nThe factorial of 3593 is roughly 3.26991567679524300173220083595 × 10^11216 \n\nThe factorial of 3594 is roughly 1.17520769424021033482255298044 × 10^11220 \n\nThe factorial of 3595 is roughly 4.224871660793556153687077964683 × 10^11223 \n\nThe factorial of 3596 is roughly 1.5192638492213627928658732361 × 10^11227 \n\nThe factorial of 3597 is roughly 5.464792065649241965938546030252 × 10^11230 \n\nThe factorial of 3598 is roughly 1.966232185220597259344688861685 × 10^11234 \n\nThe factorial of 3599 is roughly 7.076469634608929536381535213204 × 10^11237 \n\nThe factorial of 3600 is roughly 2.547529068459214633097352676753 × 10^11241 \n\nThe factorial of 3601 is roughly 9.173652175521631893783566988988 × 10^11244 \n\nThe factorial of 3602 is roughly 3.304349513622891808140840829434 × 10^11248 \n\nThe factorial of 3603 is roughly 1.190557129758327918473144950845 × 10^11252 \n\nThe factorial of 3604 is roughly 4.290767895649013818177214402845 × 10^11255 \n\nThe factorial of 3605 is roughly 1.546821826381469481452885792226 × 10^11259 \n\nThe factorial of 3606 is roughly 5.577839505931578950119106166766 × 10^11262 \n\nThe factorial of 3607 is roughly 2.011926709789520527307961594352 × 10^11266 \n\nThe factorial of 3608 is roughly 7.259031568920590062527125432424 × 10^11269 \n\nThe factorial of 3609 is roughly 2.619784493223440953566039568562 × 10^11273 \n\nThe factorial of 3610 is roughly 9.457422020536621842373402842508 × 10^11276 \n\nThe factorial of 3611 is roughly 3.41507509161577414728103576643 × 10^11280 \n\nThe factorial of 3612 is roughly 1.233525123091617621997910118834 × 10^11284 \n\nThe factorial of 3613 is roughly 4.456726269730014468278449259348 × 10^11287 \n\nThe factorial of 3614 is roughly 1.610660873880427228835831562329 × 10^11291 \n\nThe factorial of 3615 is roughly 5.822539059077744432241531097818 × 10^11294 \n\nThe factorial of 3616 is roughly 2.105430123762512386698537644971 × 10^11298 \n\nThe factorial of 3617 is roughly 7.61534075764900730268861066186 × 10^11301 \n\nThe factorial of 3618 is roughly 2.755230286117410842112739337461 × 10^11305 \n\nThe factorial of 3619 is roughly 9.971178405458909837606003662271 × 10^11308 \n\nThe factorial of 3620 is roughly 3.609566582776125361213373325742 × 10^11312 \n\nThe factorial of 3621 is roughly 1.307024059623234993295362481251 × 10^11316 \n\nThe factorial of 3622 is roughly 4.734041143955357145715802907092 × 10^11319 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_notify_reply() {
    let _ = factorion_lib::init_default();
    let mut comment = Comment::new(
        "This comment is unaware of 2!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    comment.notify = Some("u/notified".to_string());
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Hey u/notified! \n\nThe factorial of 2 is 2 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
#[ignore = "currently obsolete"]
fn test_reply_too_long() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        &format!("{}!", "9".repeat(9999)),
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();
    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Sorry, but the reply text for all those number would be _really_ long, so I'd rather not even try posting lmao\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_for_multifactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 10.into(),
            steps: vec![(3, 0)],
            result: CalculationResult::Exact(Integer::from(280)),
        }],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Triple-factorial of 10 is 280 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_for_subfactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 5.into(),
            steps: vec![(0, 0)],
            result: CalculationResult::Exact(Integer::from(44)),
        }],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Subfactorial of 5 is 44 \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_for_termial() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 5.into(),
            steps: vec![(-1, 0)],
            result: CalculationResult::Exact(Integer::from(15)),
        }],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The termial of 5 is 15 \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_for_multitermial() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 5.into(),
            steps: vec![(-2, 0)],
            result: CalculationResult::Exact(Integer::from(9)),
        }],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Double-termial of 5 is 9 \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_for_big_subfactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 5000.into(),
            steps: vec![(0, 0)],
            result: CalculationResult::Exact(math::subfactorial(5000)),
        }],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "If I post the whole number, the comment would get too long. So I had to turn it into scientific notation.\n\nSubfactorial of 5000 is roughly 1.555606884589543595233339289773 × 10^16325 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_for_high_multifactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 10.into(),
            steps: vec![(46, 0)],
            result: CalculationResult::Exact(Integer::from(10)),
        }],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "46-factorial of 10 is 10 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_for_multiple() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![
            Calculation {
                value: 5.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(Integer::from(120)),
            },
            Calculation {
                value: 6.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(Integer::from(720)),
            },
        ],
        notify: None,
        status: Status::FACTORIALS_FOUND,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 5 is 120 \n\nThe factorial of 6 is 720 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_too_long_with_multiple_numbers() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![
            Calculation {
                value: 5.into(),
                steps: vec![(2, 0)],
                result: CalculationResult::Exact(Integer::from(60)),
            },
            Calculation {
                value: 6.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(Integer::from(720)),
            },
            Calculation {
                value: 3249.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(math::factorial(3249, 1)),
            },
        ],
        notify: None,
        status: Status::FACTORIALS_FOUND | Status::REPLY_WOULD_BE_TOO_LONG,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "If I post the whole numbers, the comment would get too long. So I had to turn them into scientific notation.\n\nDouble-factorial of 5 is 60 \n\nThe factorial of 6 is 720 \n\nThe factorial of 3249 is roughly 6.412337688276552183884096303057 × 10^10000 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_too_long_from_new_comment() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 4000!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "If I post the whole number, the comment would get too long. So I had to turn it into scientific notation.\n\nThe factorial of 4000 is roughly 1.828801951514065013314743175574 × 10^12673 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_too_long_from_new_comment_for_multifactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 9000!!!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "If I post the whole number, the comment would get too long. So I had to turn it into scientific notation.\n\nTriple-factorial of 9000 is roughly 9.588379914654826764034139164855 × 10^10561 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_too_long_from_number_3250() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 3250!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "If I post the whole number, the comment would get too long. So I had to turn it into scientific notation.\n\nThe factorial of 3250 is roughly 2.084009748689879459762331298493 × 10^10004 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_from_new_comment() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 1489232!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't calculate it, so I'll have to approximate.\n\nThe factorial of 1489232 is approximately 2.120259616630154 × 10^8546211 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_from_number_1000002() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 1000002!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't calculate it, so I'll have to approximate.\n\nThe factorial of 1000002 is approximately 8.263956480142832 × 10^5565720 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_multifactorial_from_new_comment() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test comment with a factorial of 1489232!!!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't calculate it, so I'll have to approximate.\n\nTriple-factorial of 1489232 is approximately 1.6646915965772817 × 10^2848739 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_digits_from_new_comment() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This is a test comment with a factorial of 67839127837442873498364307437846329874293874384739847347394748012940124093748389701473461687364012630527560276507263724678234685360158032147349867349837403928573587255865587234672880756378340253167320767378467507576450878320574087430274607215697523720397460949849834384772847384738474837484774639847374!",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That number is so large, that I can't even approximate it well, so I can only give you an approximation on the number of digits.\n\nThe factorial of 67839127837442873498364307437846329874293874384739847347394748012940124093748389701473461687364012630527560276507263724678234685360158032147349867349837403928573587255865587234672880756378340253167320767378467507576450878320574087430274607215697523720397460949849834384772847384738474837484774639847374 has approximately 20446522215564236275041062436291735585615770688497033688635992348006569652526624848770315740147437774149118209115411567314791976403856295878031859754864941032834352021489210979065405760855940731542907166075497068156426030767735126902058810271396007949529366379073139457637180014292606643575007577178264993 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_digits_from_multifactorial() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This is a test comment with a multi-factorial of 67839127837442873498364307437846329874293874384739847347394748012940124093748389701473461687364012630527560276507263724678234685360158032147349867349837403928573587255865587234672880756378340253167320767378467507576450878320574087430274607215697523720397460949849834384772847384738474837484774639847374!!!!",
            (),
            Commands::NONE,
            MAX_LENGTH,
        ).extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That number is so large, that I can't even approximate it well, so I can only give you an approximation on the number of digits.\n\nQuadruple-factorial of 67839127837442873498364307437846329874293874384739847347394748012940124093748389701473461687364012630527560276507263724678234685360158032147349867349837403928573587255865587234672880756378340253167320767378467507576450878320574087430274607215697523720397460949849834384772847384738474837484774639847374 has approximately 5111630553891059068760265609072933896403942672124258422158998087001642413131656212192578935036859443537279552278852891828697994100964073969507964938716235258208588005372302744766351440213985182885726791518874267039106507691933781725514702567849001987382341594768284864409295003573151660893751894294566362 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_digits_from_huge() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This is a test comment with a factorial of 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000!",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That number is so large, that I can't even approximate it well, so I can only give you an approximation on the number of digits.\n\nThe factorial of 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 has approximately 3005657055180967481723488710810833949177056029941963334338855462168341353507911292252707750506615682516812938932552336962663583207128410360934307789353371877341478729134313296704066291303411733116688363922615094857155651333231353413914864438517876512346564565642682746164377718604396951353347633904460774 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_factorial_chain() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial chain 5! (((5!)!)!)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Some of these are so large, that I can't even give the number of digits of them, so I have to make a power of ten tower.\n\nThe factorial of 5 is 120 \n\nThe factorial of the factorial of the factorial of the factorial of 5 has on the order of 10^(1327137837206659786031747299606377028838214110127983264121956821748182259183419110243647989875487282380340365022219190769273781621333865377166444878565902856196867372963998070875391932298781352992969935) digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_factorial_chain_huge() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "This is a test with a factorial chain 5! (((((((((((((((((((((((((((((((((5!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!)!",
            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Some of these are so large, that I can't even give the number of digits of them, so I have to make a power of ten tower.\n\nThe factorial of 5 is 120 \n\nThe factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of the factorial of 5 has on the order of 10^(10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^10\\^(1327137837206659786031747299606377028838214110127983264121956821748182259183419110243647989875487282380340365022219190769273781621333865377166444878565902856196867372963998070875391932298781352992969935\\)) digits \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_factorial_chain_extreme() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(

            (),
            Commands::NONE,
            MAX_LENGTH
        ).extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, I can't even fit it in a comment with a power of 10 tower, so I'll have to use tetration!\n\nAll that of 9 has on the order of ^(575)10 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_mixed_factorial_chain() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial chain ((!(5!!!))!)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That number is so large, that I can't even approximate it well, so I can only give you an approximation on the number of digits.\n\nThe factorial of the factorial of subfactorial of triple-factorial of 5 has approximately 6.387668451985102626824622002774 × 10^7597505 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_mixed_factorial_chain2() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial chain (!5)! (5!)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of subfactorial of 5 is 2658271574788448768043625811014615890319638528000000000 \n\nThe factorial of the factorial of 5 is 6689502913449127057588118054090372586752746333138029810295671352301633557244962989366874165271984981308157637893214090552534408589408121859898481114389650005964960521256960000000000000000000000000000 \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_mixed_factorial_chain3() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial chain !(((!5)?!!?!)!?) !short",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't even give the number of digits of it, so I have to make a power of ten tower.\n\nSubfactorial of the termial of the factorial of the factorial of the termial of double-factorial of the termial of subfactorial of 5 has on the order of 10^(10\\^(2.107567304411394574160420056681 × 10^2542\\)) digits \n\n\n*^(This action was performed by a bot.)*"
    );
}
#[test]
fn test_get_reply_mixed_factorial_chain4() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial chain -!(-((-!(---5))?!!?!)!?)",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Negative subfactorial of the negative termial of the factorial of the factorial of the termial of double-factorial of the termial of negative subfactorial of -5 is ∞\u{303} \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_factorial_chain_from_approximate() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a factorial chain (20000000!)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That number is so large, that I can't even approximate it well, so I can only give you an approximation on the number of digits.\n\nThe factorial of the factorial of 20000000 has approximately 2.901348168358672858923433671149 × 10^137334722 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_float_overflow_approximate() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new("(44787927!)!", (), Commands::NONE, MAX_LENGTH)
        .extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't even give the number of digits of it, so I have to make a power of ten tower.\n\nThe factorial of the factorial of 44787927 has on the order of 10^(323228502) digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_factorial_chain_gamma() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a decimal factorial chain (((0.5!)!)!)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of the factorial of the factorial of the factorial of 0.5 is approximately 0.9927771298141361 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_factorial_chain_gamma_diverge() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "This is a test with a decimal factorial chain (((3.141592!)!)!)!",
        (),
        Commands::NONE,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That number is so large, that I can't even approximate it well, so I can only give you an approximation on the number of digits.\n\nThe factorial of the factorial of the factorial of the factorial of 3.141592 has approximately 4.944306505469543218555360199314 × 10^25349 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_ridiculous_number() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(

            (),
            Commands::NONE,
            MAX_LENGTH,
        )
        .extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, I can't even fit it in a comment with a power of 10 tower, so I'll have to use tetration!\n\nAll that of roughly 1 × 10^2652 has on the order of ^(9041)10 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_biggest_possible_reddit() {
    let _ = factorion_lib::init_default();
    // This commment contains as many facorials as possible (with a big base) in exactly 40000 characters.
    // 9e99 is chosen as the base number, as it takes less to reach the tower of ten from it, than 9?!?, which would be the alternative at its size.
    let comment = Comment::new(
                "9e
                (),
                Commands::TERMIAL,
                MAX_LENGTH,
            )
            .extract()
            .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, I can't even fit it in a comment with a power of 10 tower, so I'll have to use tetration!\n\nAll that of roughly 9 × 10^99 has on the order of ^(20000)10 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_subfactorial_confusion() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
        "What is the factorial of 287,491?",
        (),
        Commands::TERMIAL,
        MAX_LENGTH,
    )
    .extract()
    .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "The termial of 287.491 is approximately 41469.2830405 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_ridiculous_input() {
    let _ = factorion_lib::init_default();
    let comment = Comment::new(
            "9e999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999!",
            (),
            Commands::NONE,
            MAX_LENGTH,
        )
        .extract()
        .calc();

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "That is so large, that I can't even give the number of digits of it, so I have to make a power of ten tower.\n\nThe factorial of 9 × 10^999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 has on the order of 10^(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164) digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_get_reply_approximate_digits_from_mixed_types() {
    let _ = factorion_lib::init_default();
    let comment = Comment {
        meta: (),
        calculation_list: vec![
            Calculation {
                value: 8.into(),
                steps: vec![(2, 0)],
                result: CalculationResult::Exact(Integer::from(384)),
            },
            Calculation {
                value: 10000.into(),
                steps: vec![(1, 0)],
                result: CalculationResult::Exact(math::factorial(10000, 1)),
            },
            Calculation {
                value: 37923648.into(),
                steps: vec![(1, 0)],
                result: {
                    let (base, exponent) =
                        math::approximate_factorial(37923648.into(), FLOAT_PRECISION);
                    CalculationResult::Approximate(base.into(), exponent)
                },
            },
            Calculation {
                value: 283462.into(),
                steps: vec![(2, 0)],
                result: CalculationResult::ApproximateDigits(
                    false,
                    math::approximate_multifactorial_digits(283462.into(), 2, FLOAT_PRECISION),
                ),
            },
        ],
        notify: None,
        status: Status::REPLY_WOULD_BE_TOO_LONG,
        commands: Default::default(),
        max_length: MAX_LENGTH,
    };

    let reply = comment.get_reply();
    assert_eq!(
        reply,
        "Some of these are so large, that I can't even approximate them well, so I can only give you an approximation on the number of digits.\n\nDouble-factorial of 8 is 384 \n\nThe factorial of 10000 is roughly 2.84625968091705451890641321212 × 10^35659 \n\nThe factorial of 37923648 is approximately 1.760585629143694 × 10^270949892 \n\nDouble-factorial of 283462 has approximately 711238 digits \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_arbitrary_comment() {
    let _ = factorion_lib::init_default();
    arbtest::arbtest(|u| {
        let text = u.arbitrary()?;
        let _ = Comment::new(text, (), Commands::from_comment_text(text), MAX_LENGTH)
            .extract()
            .calc()
            .get_reply();
        Ok(())
    });
}

#[test]
fn test_factorion_detection_in_reply_single() {
    let _ = factorion_lib::init_default();

    // Create a comment with a factorion result (145) for testing
    let factorion_comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 145.into(),
            steps: vec![(1, 0)],
            result: {
                let (base, exponent) = math::approximate_factorial(145.into(), FLOAT_PRECISION);
                CalculationResult::Approximate(base.into(), exponent)
            },
        }],
        notify: None,
        commands: Commands::NONE,
        max_length: MAX_LENGTH,
        status: Status::FACTORIALS_FOUND,
    };

    let reply = factorion_comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 145 is 145 \n\n\n**Interesting!** 145 is a [factorion](https://en.wikipedia.org/wiki/Factorion) - a number that equals the sum of the factorial of its digits!\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_factorion_detection_in_reply_multiple() {
    let _ = factorion_lib::init_default();

    // Test with multiple factorions in one reply (145 and 40585)
    let multiple_factorion_comment = Comment {
        meta: (),
        calculation_list: vec![
            Calculation {
                value: 145.into(),
                steps: vec![(1, 0)],
                result: {
                    let (base, exponent) = math::approximate_factorial(145.into(), FLOAT_PRECISION);
                    CalculationResult::Approximate(base.into(), exponent)
                },
            },
            Calculation {
                value: 40585.into(),
                steps: vec![(1, 0)],
                result: {
                    let (base, exponent) =
                        math::approximate_factorial(40585.into(), FLOAT_PRECISION);
                    CalculationResult::Approximate(base.into(), exponent)
                },
            },
        ],
        notify: None,
        commands: Commands::NONE,
        max_length: MAX_LENGTH,
        status: Status::FACTORIALS_FOUND,
    };

    let reply = multiple_factorion_comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 145 is roughly 5.550293832739304789551054660550 × 10^249 \n\nThe factorial of 40585 is roughly 1.733368733161038382077056621562 × 10^182314 \n\n**Interesting!** 145, 40585 are [factorions](https://en.wikipedia.org/wiki/Factorion) - numbers that equal the sum of the factorial of their digits!\n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_no_factorion_message_for_normal_numbers() {
    let _ = factorion_lib::init_default();

    // Test that normal factorial results don't trigger factorion message
    let normal_comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 5.into(),
            steps: vec![(1, 0)],
            result: CalculationResult::Exact(Integer::from(120)), // 5! = 120, not a factorion
        }],
        notify: None,
        commands: Commands::NONE,
        max_length: MAX_LENGTH,
        status: Status::FACTORIALS_FOUND,
    };

    let reply = normal_comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 5 is 120 \n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_factorion_detection_40585() {
    let _ = factorion_lib::init_default();

    // Test the largest known factorion: 40585
    let factorion_comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 40585.into(),
            steps: vec![(1, 0)],
            result: {
                let (base, exponent) = math::approximate_factorial(40585.into(), FLOAT_PRECISION);
                CalculationResult::Approximate(base.into(), exponent)
            },
        }],
        notify: None,
        commands: Commands::NONE,
        max_length: MAX_LENGTH,
        status: Status::FACTORIALS_FOUND,
    };

    let reply = factorion_comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 40585 is roughly 1.733368733161038382077056621562 × 10^182314 \n\n**Interesting!** 40585 is a [factorion](https://en.wikipedia.org/wiki/Factorion) - a number that equals the sum of the factorial of its digits!\n\n\n*^(This action was performed by a bot.)*"
    );
}

#[test]
fn test_factorion_not_detected_for_approximations() {
    let _ = factorion_lib::init_default();

    // Test that approximate results don't trigger factorion detection
    let approximate_comment = Comment {
        meta: (),
        calculation_list: vec![Calculation {
            value: 145.into(),
            steps: vec![(1, 0)],
            result: CalculationResult::Approximate(
                factorion_math::rug::Float::with_val(
                    factorion_lib::recommended::FLOAT_PRECISION,
                    5.550293832739304789551054660550,
                )
                .into(),
                Integer::from(249),
            ), // Approximate result, not exact
        }],
        notify: None,
        commands: Commands::NONE,
        max_length: MAX_LENGTH,
        status: Status::FACTORIALS_FOUND,
    };

    let reply = approximate_comment.get_reply();
    assert_eq!(
        reply,
        "The factorial of 145 is roughly 5.550293832739304789551054660550 × 10^249 \n\n\n*^(This action was performed by a bot.)*"
    );
}
